<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on The Programmer&#39;s Ephemeris</title>
    <link>/csharp/</link>
    <description>Recent content in C# on The Programmer&#39;s Ephemeris</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/csharp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>String.Substring</title>
      <link>/csharp/string-substring/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/csharp/string-substring/</guid>
      <description>There are 2 overloads to the Substring() method:
   Method Description     Substring(Int32) Returns a substring from the specified string. It begins at the specified index and continues to the end of the string.   Substring(Int32, Int32) Returns a substring from the specified string. It begins at the specified index and continues to the specified length.    Substring(Int32) The Substring(Int32) method returns a substring from the specified string.</description>
    </item>
    
    <item>
      <title>String.Trim</title>
      <link>/csharp/string-trim/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/csharp/string-trim/</guid>
      <description>There are 2 overloads to the Trim() method:
   Method Description     Trim() Removes all leading and trailing whitespace from a given string.   Trim(Char[]) Removes all leading and trailing instances of the specified characters from a given string    Trim The Trim() method removes all leading and trailing whitespace from a given string.
public string Trim(); Examples using System; public class Program { public static void Main() { var testString = &amp;#34; some string &amp;#34;; testString.</description>
    </item>
    
    <item>
      <title>String.TrimEnd</title>
      <link>/csharp/string-trimend/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/csharp/string-trimend/</guid>
      <description> The TrimEnd(char[]) method removes all trailing instances of the specified characters from a given string.
public string TrimEnd(params char[] trimChars); Examples using System; public class Program { public static void Main() { char[] charsToTrim = { &amp;#39;*&amp;#39;, &amp;#39; &amp;#39; }; string message = &amp;#34;*** some string ***&amp;#34;; Console.WriteLine(message.TrimEnd(charsToTrim)); } } // Output /* * *** some string */</description>
    </item>
    
    <item>
      <title>String.TrimStart</title>
      <link>/csharp/string-trimstart/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/csharp/string-trimstart/</guid>
      <description> The TrimStart(char[]) method removes all leading instances of the specified characters from a given string.
public string TrimStart(params char[] trimChars); Examples using System; public class Program { public static void Main() { char[] charsToTrim = { &amp;#39;*&amp;#39;, &amp;#39; &amp;#39; }; string message = &amp;#34;*** some string ***&amp;#34;; Console.WriteLine(message.TrimStart(charsToTrim)); } } // Output /* * some string *** */</description>
    </item>
    
    <item>
      <title>String Interpolation</title>
      <link>/csharp/string-interpolation/</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/csharp/string-interpolation/</guid>
      <description>String interpolation provides an alternative to the string.Format method. While the end result is the same, string interpolation provides a more readable and convenient syntax for formatting strings. This feature is available in C# versions 6 and later.
To begin the string interpolation, the string must be prefixed with the $ character:
public void Test() { var amount = 1.23; var message = $&amp;#34;The cost is {amount:C2}&amp;#34;; } // Output /* * The cost is $1.</description>
    </item>
    
    <item>
      <title>String.Format</title>
      <link>/csharp/string-format/</link>
      <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/csharp/string-format/</guid>
      <description>The String object in the C# language exposes a method for string formatting that is very easy to use. The most common use case of the string.Format method is for passing a string representing the desired format as the first argument, and an array of objects to insert into the string.
The parameter indicators in the format string are 0 based indexes. The first parameter is {0}, the second is {1}, etc.</description>
    </item>
    
  </channel>
</rss>